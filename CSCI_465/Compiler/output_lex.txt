program_sym program
identifier simpleProgram
semicolon ;
var_sym var
identifier arr
colon :
array_sym array
lbrack [
number 1
period .
period .
number 5
rbrack ]
of_sym of
integer_sym integer
semicolon ;
litchar x
comma ,
litchar y
colon :
integer_sym integer
semicolon ;
identifier result
colon :
integer_sym integer
semicolon ;
litchar c
colon :
char_sym char
semicolon ;
identifier sum
colon :
integer_sym integer
semicolon ;
begin_sym begin
writeln_sym writeln
lparen (
quotestring "Hello Dr. Reza"
rparen )
semicolon ;
litchar x
assign :=
number 9
semicolon ;
litchar y
assign :=
number 6
semicolon ;
litchar c
assign :=
quotechar 'L'
semicolon ;
if_sym if
litchar x
greater >
litchar y
then_sym then
begin_sym begin
identifier result
assign :=
lparen (
litchar x
plus +
litchar y
rparen )
times *
number 6
semicolon ;
end_sym end
else_sym else
begin_sym begin
identifier result
assign :=
litchar x
times *
number 5
semicolon ;
end_sym end
semicolon ;
writeln_sym writeln
lparen (
quotestring 'Result is : '
rparen )
semicolon ;
writeln_sym writeln
lparen (
identifier result
rparen )
semicolon ;
identifier arr[1]
assign :=
number 10
semicolon ;
identifier arr[2]
assign :=
number 5
semicolon ;
identifier sum
assign :=
identifier arr[1]
plus +
identifier arr[2]
semicolon ;
writeln_sym writeln
lparen (
quotestring 'Enter your favorite integer: '
rparen )
semicolon ;
readln_sym readln
lparen (
litchar x
rparen )
semicolon ;
writeln_sym writeln
lparen (
litchar x
rparen )
semicolon ;
writeln_sym writeln
lparen (
quotestring '\nGood Bye and '
rparen )
semicolon ;
writeln_sym writeln
lparen (
quotestring 'Happy Holidays!'
rparen )
semicolon ;
write_sym write
lparen (
litchar c
rparen )
semicolon ;
end_sym end
period .
