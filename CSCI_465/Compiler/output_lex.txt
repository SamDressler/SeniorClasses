program_sym program
identifier example
lparen (
identifier input
comma ,
identifier output
rparen )
semicolon ;
var_sym var
litchar x
comma ,
litchar y
colon :
integer_sym integer
semicolon ;
var_sym var
identifier result
colon :
integer_sym integer
semicolon ;
procedure_sym procedure
identifier gcd
lparen (
litchar a
comma ,
litchar b
colon :
integer_sym integer
rparen )
colon :
integer_sym integer
semicolon ;
begin_sym begin
lbrace {
identifier gcd
rbrace }
if_sym if
litchar b
greaterequal >=
illegal 0f!
then_sym then
identifier gcd
assign :=
litchar a
else_sym else
identifier gcd
assign :=
identifier gcd
lparen (
litchar b
comma ,
litchar a
mod_sym mod
litchar b
rparen )
end_sym end
semicolon ;
lbrace {
identifier gcd
rbrace }
begin_sym begin
lbrace {
identifier example
rbrace }
read_sym read
lparen (
litchar x
comma ,
litchar y
rparen )
semicolon ;
write_sym write
lparen (
identifier gcd
lparen (
litchar x
comma ,
litchar y
rparen )
rparen )
semicolon ;
identifier result
assign :=
lparen (
litchar x
plus +
litchar y
rparen )
times *
number 4
semicolon ;
identifier result
colon :
equals =
identifier result
div /
lparen (
number 6
minus -
number 3
rparen )
semicolon ;
write_sym write
lparen (
identifier result
rparen )
semicolon ;
end_sym end
period .
